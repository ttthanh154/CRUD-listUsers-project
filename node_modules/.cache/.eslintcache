[{"C:\\Users\\Admin\\Desktop\\Proj\\crudProject\\my-app\\src\\index.js":"1","C:\\Users\\Admin\\Desktop\\Proj\\crudProject\\my-app\\src\\App.js":"2","C:\\Users\\Admin\\Desktop\\Proj\\crudProject\\my-app\\src\\components\\TableUsers.js":"3","C:\\Users\\Admin\\Desktop\\Proj\\crudProject\\my-app\\src\\services\\UserService.js":"4","C:\\Users\\Admin\\Desktop\\Proj\\crudProject\\my-app\\src\\services\\customizeAxios.js":"5","C:\\Users\\Admin\\Desktop\\Proj\\crudProject\\my-app\\src\\components\\AddUserModal.js":"6","C:\\Users\\Admin\\Desktop\\Proj\\crudProject\\my-app\\src\\components\\EditUserModal.js":"7","C:\\Users\\Admin\\Desktop\\Proj\\crudProject\\my-app\\src\\components\\DeleteUserModal.js":"8"},{"size":499,"mtime":1675231452111,"results":"9","hashOfConfig":"10"},{"size":681,"mtime":1675262829859,"results":"11","hashOfConfig":"10"},{"size":11536,"mtime":1675262853446,"results":"12","hashOfConfig":"10"},{"size":532,"mtime":1675261739062,"results":"13","hashOfConfig":"10"},{"size":899,"mtime":1675176264633,"results":"14","hashOfConfig":"10"},{"size":3120,"mtime":1675262135586,"results":"15","hashOfConfig":"10"},{"size":2710,"mtime":1675261293283,"results":"16","hashOfConfig":"10"},{"size":1505,"mtime":1675176848094,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"cpzwj9",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"C:\\Users\\Admin\\Desktop\\Proj\\crudProject\\my-app\\src\\index.js",[],[],[],"C:\\Users\\Admin\\Desktop\\Proj\\crudProject\\my-app\\src\\App.js",[],[],"C:\\Users\\Admin\\Desktop\\Proj\\crudProject\\my-app\\src\\components\\TableUsers.js",["45","46","47","48","49"],[],"import { useEffect, useState } from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport { fetchAllUsers } from \"../services/UserService\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport AddUserModal from \"./AddUserModal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport EditUserModal from \"./EditUserModal\";\r\nimport DeleteUserModal from \"./DeleteUserModal\";\r\nimport \"./TableUsers.scss\";\r\nimport _, { result } from \"lodash\";\r\nimport { debounce } from \"lodash\";\r\nimport { CSVLink, CSVDownload } from \"react-csv\";\r\nimport Papa from \"papaparse\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst TableUsers = (props) => {\r\n  const [listUsers, setListUsers] = useState([]);\r\n  const [totalUsers, setTotalUsers] = useState(0);\r\n  //Total Users should be displayed on the screen to know the total of users of database\r\n  const [totalPages, setTotalPages] = useState(0);\r\n  const [isShowAddUserModal, setIsShowAddUserModal] = useState(false);\r\n  const [isShowEditUserModal, setIsShowEditUserModal] = useState(false);\r\n  const [dataUserEdit, setDataUserEdit] = useState({});\r\n  const [isShowDeleteUserModal, setIsShowDeleteUserModal] = useState(false);\r\n  const [dataUserDelete, setDataUserDelete] = useState({});\r\n  //Sort depends on type of sorting and type of field. e.g: Ascending sort and ID (lastname, firstname, email,etc.)\r\n  const [sortBy, setSortBy] = useState(\"asc\");\r\n  const [sortField, setSortField] = useState(\"\");\r\n\r\n  const csvData = [...listUsers];\r\n\r\n  //display users first time\r\n  useEffect(() => {\r\n    getUsers(1);\r\n  }, []);\r\n\r\n  //display users\r\n  const getUsers = async (page) => {\r\n    let res = await fetchAllUsers(page);\r\n    if (res && res.data) {\r\n      setListUsers(res.data);\r\n      setTotalUsers(res.total);\r\n      setTotalPages(res.total_pages);\r\n    }\r\n  };\r\n\r\n  //update users after creating new one\r\n  const handleUpdateUsers = (user) => {\r\n    setListUsers([user, ...listUsers]);\r\n  };\r\n\r\n  //change page\r\n  const handlePageClick = (event) => {\r\n    getUsers(+event.selected + 1);\r\n  };\r\n\r\n  //close every modal\r\n  const handleClose = () => {\r\n    setIsShowAddUserModal(false);\r\n    setIsShowEditUserModal(false);\r\n    setIsShowDeleteUserModal(false);\r\n  };\r\n\r\n  const handleEditUser = (user) => {\r\n    setDataUserEdit(user);\r\n    setIsShowEditUserModal(true);\r\n  };\r\n\r\n  //the editUser modal displays data after editing user.\r\n  const handleEditUserFromModal = (user) => {\r\n    let cloneListUser = _.cloneDeep(listUsers);\r\n    let index = listUsers.findIndex((item) => item.id === user.id);\r\n    cloneListUser[index].first_name = user.first_name;\r\n    cloneListUser[index].last_name = user.last_name;\r\n    setListUsers(cloneListUser);\r\n  };\r\n\r\n  const handleDeleteUser = (user) => {\r\n    setIsShowDeleteUserModal(true);\r\n    setDataUserDelete(user);\r\n  };\r\n\r\n  // the deleteUser modal displays data after deleting user\r\n  const handleDeleteUserModal = (user) => {\r\n    let cloneListUser = _.cloneDeep(listUsers);\r\n    cloneListUser = cloneListUser.filter((item) => item.id !== user.id);\r\n    setListUsers(cloneListUser);\r\n  };\r\n\r\n  //Click on asc or desc arrow to sort according to the field\r\n  const handleSort = (sortBy, sortField) => {\r\n    setSortBy(sortBy);\r\n    setSortField(sortField);\r\n\r\n    let cloneListUser = _.cloneDeep(listUsers);\r\n    cloneListUser = _.orderBy(cloneListUser, [sortField], [sortBy]);\r\n    setListUsers(cloneListUser);\r\n  };\r\n\r\n  //Type to search for user's email.\r\n  const handleSearch = debounce((event) => {\r\n    let term = event.target.value;\r\n    if (term) {\r\n      let cloneListUser = _.cloneDeep(listUsers);\r\n      cloneListUser = cloneListUser.filter((item) => item.email.includes(term));\r\n      setListUsers(cloneListUser);\r\n    } else {\r\n      getUsers(1);\r\n    }\r\n  }, 500);\r\n\r\n  const handleImport = (event) => {\r\n    if (event && event.target && event.target.files && event.target.files[0]) {\r\n      let file = event.target.files[0];\r\n\r\n      if (file.type !== \"text/csv\") {\r\n        toast.error(\"This is not CSV file! \");\r\n        return;\r\n      }\r\n\r\n      Papa.parse(file, {\r\n        // header: true,\r\n        complete: function (results) {\r\n          let rawCSV = results.data;\r\n          if (rawCSV.length > 0) {\r\n            if (rawCSV[0] && rawCSV[0].length === 3) {\r\n              if (\r\n                rawCSV[0][0] !== \"email\" ||\r\n                rawCSV[0][1] !== \"first_name\" ||\r\n                rawCSV[0][2] !== \"last_name\"\r\n              ) {\r\n                toast.error(\"Wrong file CSV's header format\");\r\n              } else {\r\n                let result = [];\r\n\r\n                rawCSV.map((item, index) => {\r\n                  if (index > 0 && item.length === 3) {\r\n                    let obj = {};\r\n                    obj.email = item[0];\r\n                    obj.first_name = item[1];\r\n                    obj.last_name = item[2];\r\n                    result.push(obj);\r\n                  }\r\n                });\r\n                setListUsers(result);\r\n                console.log(result);\r\n              }\r\n            } else {\r\n              toast.error(\"Wrong format CSV file! \");\r\n            }\r\n          } else {\r\n            toast.error(\"No data in the file!\");\r\n          }\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <div className=\"my-3 add-new d-flex justify-content-between\">\r\n          <p>List Users:</p>\r\n          <div className=\"btn-group\">\r\n            <Button variant=\"dark mx-1\">\r\n              <label htmlFor=\"import\">\r\n                <i class=\"fa-solid fa-file-import\"></i>\r\n                <span className=\"mx-2\">Import</span>\r\n              </label>\r\n              <input\r\n                id=\"import\"\r\n                type=\"file\"\r\n                hidden\r\n                onChange={(event) => handleImport(event)}\r\n              />\r\n            </Button>\r\n\r\n            <Button variant=\"info mx-1\">\r\n              <CSVLink filename={\"user-list.csv\"} data={csvData}>\r\n                <i class=\"fa-solid fa-file-arrow-down\"></i>\r\n                <span className=\"mx-2\">Export</span>\r\n              </CSVLink>\r\n              <CSVDownload data={csvData} target=\"_blank\" />\r\n            </Button>\r\n\r\n            <Button\r\n              variant=\"success mx-1\"\r\n              onClick={() => {\r\n                setIsShowAddUserModal(true);\r\n              }}\r\n            >\r\n              <i class=\"fa-solid fa-user-plus mx-1\"></i>\r\n              Add User\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-3 my-3\">\r\n          <input\r\n            className=\"form-control\"\r\n            placeholder=\"Search for email...\"\r\n            // value={keyword}\r\n            onChange={(event) => handleSearch(event)}\r\n          />\r\n        </div>\r\n        <Table striped bordered hover>\r\n          <thead>\r\n            <tr>\r\n              <th>\r\n                <div className=\"sort-user\">\r\n                  <span>ID</span>\r\n                  <span>\r\n                    <i\r\n                      className=\"fa-solid fa-arrow-down-long\"\r\n                      onClick={() => handleSort(\"desc\", \"id\")}\r\n                    ></i>\r\n                    <i\r\n                      className=\"fa-solid fa-arrow-up-long\"\r\n                      onClick={() => handleSort(\"asc\", \"id\")}\r\n                    ></i>\r\n                  </span>\r\n                </div>\r\n              </th>\r\n\r\n              <th>\r\n                <div className=\"sort-user\">\r\n                  <span>Email</span>\r\n                  <span>\r\n                    <i\r\n                      className=\"fa-solid fa-arrow-down-long\"\r\n                      onClick={() => handleSort(\"desc\", \"email\")}\r\n                    ></i>\r\n                    <i\r\n                      className=\"fa-solid fa-arrow-up-long\"\r\n                      onClick={() => handleSort(\"asc\", \"email\")}\r\n                    ></i>\r\n                  </span>\r\n                </div>\r\n              </th>\r\n              <th>\r\n                <div className=\"sort-user\">\r\n                  <span>First Name</span>\r\n                  <span>\r\n                    <i\r\n                      className=\"fa-solid fa-arrow-down-long\"\r\n                      onClick={() => handleSort(\"desc\", \"first_name\")}\r\n                    ></i>\r\n                    <i\r\n                      className=\"fa-solid fa-arrow-up-long\"\r\n                      onClick={() => handleSort(\"asc\", \"first_name\")}\r\n                    ></i>\r\n                  </span>\r\n                </div>\r\n              </th>\r\n              <th>\r\n                <div className=\"sort-user\">\r\n                  <span>Last Name</span>\r\n                  <span>\r\n                    <i\r\n                      className=\"fa-solid fa-arrow-down-long\"\r\n                      onClick={() => handleSort(\"desc\", \"last_name\")}\r\n                    ></i>\r\n                    <i\r\n                      className=\"fa-solid fa-arrow-up-long\"\r\n                      onClick={() => handleSort(\"asc\", \"last_name\")}\r\n                    ></i>\r\n                  </span>\r\n                </div>\r\n              </th>\r\n              <th className=\"sort-user\">Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {listUsers &&\r\n              listUsers.length > 0 &&\r\n              listUsers.map((item, index) => {\r\n                return (\r\n                  <tr key={`user-${item.id}`}>\r\n                    <td>{item.id}</td>\r\n                    <td>{item.email}</td>\r\n                    <td>{item.first_name}</td>\r\n                    <td>{item.last_name}</td>\r\n                    <td>\r\n                      <Button\r\n                        variant=\"warning mx-3\"\r\n                        onClick={() => handleEditUser(item)}\r\n                      >\r\n                        Edit\r\n                      </Button>\r\n                      <Button\r\n                        variant=\"danger\"\r\n                        onClick={() => handleDeleteUser(item)}\r\n                      >\r\n                        Delete\r\n                      </Button>\r\n                    </td>\r\n                  </tr>\r\n                );\r\n              })}\r\n          </tbody>\r\n        </Table>\r\n        <ReactPaginate\r\n          className=\"pagination\"\r\n          breakLabel=\"...\"\r\n          nextLabel=\"Next >\"\r\n          onPageChange={handlePageClick}\r\n          pageRangeDisplayed={5}\r\n          pageCount={totalPages}\r\n          previousLabel=\"< Previous\"\r\n          renderOnZeroPageCount={null}\r\n          containerClassName=\"pagination\"\r\n          activeClassName=\"active\"\r\n          pageLinkClassName=\"page-link\"\r\n          breakLinkClassName=\"page-link\"\r\n          nextLinkClassName=\"page-link\"\r\n          previousLinkClassName=\"page-link\"\r\n          pageClassName=\"page-item\"\r\n          breakClassName=\"page-item\"\r\n          nextClassName=\"page-item\"\r\n          previousClassName=\"page-item\"\r\n        />\r\n        <AddUserModal\r\n          show={isShowAddUserModal}\r\n          handleClose={handleClose}\r\n          handleUpdateUsers={handleUpdateUsers}\r\n        />\r\n        <EditUserModal\r\n          show={isShowEditUserModal}\r\n          handleClose={handleClose}\r\n          dataUserEdit={dataUserEdit}\r\n          handleEditUserFromModal={handleEditUserFromModal}\r\n        />\r\n        <DeleteUserModal\r\n          show={isShowDeleteUserModal}\r\n          handleClose={setIsShowDeleteUserModal}\r\n          dataUserDelete={dataUserDelete}\r\n          handleDeleteUserModal={handleDeleteUserModal}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TableUsers;\r\n","C:\\Users\\Admin\\Desktop\\Proj\\crudProject\\my-app\\src\\services\\UserService.js",[],[],"C:\\Users\\Admin\\Desktop\\Proj\\crudProject\\my-app\\src\\services\\customizeAxios.js",[],[],"C:\\Users\\Admin\\Desktop\\Proj\\crudProject\\my-app\\src\\components\\AddUserModal.js",[],[],"C:\\Users\\Admin\\Desktop\\Proj\\crudProject\\my-app\\src\\components\\EditUserModal.js",["50","51"],[],"import Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/esm/Button\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { putEditUser } from \"../services/UserService\";\r\nimport { toast } from \"react-toastify\";\r\nimport { last } from \"lodash\";\r\n\r\nconst EditUserModal = (props) => {\r\n  const { show, handleClose, dataUserEdit, handleEditUserFromModal } = props;\r\n  const [firstname, setFirstname] = useState(\"\");\r\n  const [lastname, setLastname] = useState(\"\");\r\n\r\n  const handleEditUser = async () => {\r\n    let res = await putEditUser(dataUserEdit.id, firstname, lastname);\r\n    console.log(res);\r\n    if (res && res.updatedAt) {\r\n      handleEditUserFromModal({\r\n        id: dataUserEdit.id,\r\n        first_name: firstname,\r\n        last_name: lastname,\r\n      });\r\n      handleClose();\r\n      setFirstname(\"\");\r\n      setLastname(\"\");\r\n      toast.success(\"Edit successfully\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (show) {\r\n      setFirstname(dataUserEdit.first_name);\r\n      setLastname(dataUserEdit.last_name);\r\n    }\r\n  }, [dataUserEdit]);\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <Modal\r\n          show={show}\r\n          onHide={handleClose}\r\n          backdrop=\"static\"\r\n          keyboard={false}\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Edit User</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"body-add-new\">\r\n              <div className=\"mb-3\">\r\n                <label nextClassName=\"form-label\">\r\n                  <b>First Name:</b>\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"Andy\"\r\n                  value={firstname}\r\n                  onChange={(event) => setFirstname(event.target.value)}\r\n                />\r\n              </div>\r\n              <div className=\"mb-3\">\r\n                <label className=\"form-label\">\r\n                  <b>Last Name:</b>\r\n                </label>\r\n                <textarea\r\n                  className=\"form-control\"\r\n                  placeholder=\"William\"\r\n                  value={lastname}\r\n                  onChange={(event) => setLastname(event.target.value)}\r\n                ></textarea>\r\n              </div>\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={handleClose}>\r\n              Close\r\n            </Button>\r\n            <Button variant=\"primary\" onClick={() => handleEditUser()}>\r\n              Finish\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditUserModal;\r\n","C:\\Users\\Admin\\Desktop\\Proj\\crudProject\\my-app\\src\\components\\DeleteUserModal.js",[],[],{"ruleId":"52","severity":1,"message":"53","line":10,"column":13,"nodeType":"54","messageId":"55","endLine":10,"endColumn":19},{"ruleId":"52","severity":1,"message":"56","line":18,"column":10,"nodeType":"54","messageId":"55","endLine":18,"endColumn":20},{"ruleId":"52","severity":1,"message":"57","line":27,"column":10,"nodeType":"54","messageId":"55","endLine":27,"endColumn":16},{"ruleId":"52","severity":1,"message":"58","line":28,"column":10,"nodeType":"54","messageId":"55","endLine":28,"endColumn":19},{"ruleId":"59","severity":1,"message":"60","line":136,"column":42,"nodeType":"61","messageId":"62","endLine":136,"endColumn":44},{"ruleId":"52","severity":1,"message":"63","line":6,"column":10,"nodeType":"54","messageId":"55","endLine":6,"endColumn":14},{"ruleId":"64","severity":1,"message":"65","line":34,"column":6,"nodeType":"66","endLine":34,"endColumn":20,"suggestions":"67"},"no-unused-vars","'result' is defined but never used.","Identifier","unusedVar","'totalUsers' is assigned a value but never used.","'sortBy' is assigned a value but never used.","'sortField' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'last' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'show'. Either include it or remove the dependency array.","ArrayExpression",["68"],{"desc":"69","fix":"70"},"Update the dependencies array to be: [dataUserEdit, show]",{"range":"71","text":"72"},[1061,1075],"[dataUserEdit, show]"]